# -*- coding: utf-8 -*-
"""predictive-analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HMpZ6r1tCDMK7iGWzPFFuFem9CH5GEca

### **Import Library**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, LabelEncoder
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from sklearn.preprocessing import MinMaxScaler

"""**Insight:**


*  `pandas`, `numpy`: Untuk mengolah dan menghitung data (seperti tabel).
* `matplotlib.pyplot`, `seaborn`: Untuk membuat grafik
dan visualisasi data.
* `joblib`: Untuk menyimpan dan memuat model atau objek Python lainnya.
* `sklearn.model_selection.train_test_split`: Untuk membagi data menjadi data latih dan data uji.
* `sklearn.model_selection.GridSearchCV`: (Meskipun diimpor, kode yang ditampilkan tidak menggunakannya) Biasanya untuk mencari pengaturan terbaik (parameter) untuk model.
* `sklearn.preprocessing.StandardScaler`: Untuk menstandarkan data numerik (membuat nilainya rata-rata 0).
* `sklearn.preprocessing.LabelEncoder`: Untuk mengubah data teks menjadi angka.
* `imblearn.over_sampling.SMOTE`: Untuk menyeimbangkan jumlah data antar kategori (misalnya, jumlah penderita dan non-penderita diabetes).
* `sklearn.ensemble.RandomForestClassifier`: Model machine learning yang akan digunakan untuk prediksi.
* `sklearn.metrics.classification_report`, `accuracy_score`, `confusion_matrix`: Alat untuk mengukur seberapa baik kinerja model.

### **Load Dataset**
"""

df = pd.read_csv('diabetes_prediction_dataset.csv')

df.head()

"""### **EDA**"""

# Meninjau jumlah baris kolom dan jenis data dalam dataset dengan info.
df.info()

"""**Insight:**

Berdasarkan data di atas, terdapat 9 kolom dengan 100000 baris. Terdiri dari 4 fitur (hypertension, heart_disease, blood_glucose_level, diabetes) dengan tipe data integer, 3 fitur (age, bmi, HbA1c_level) dengan tipe data float , dan 2 fitur (gender dan smoking_history) dengan tipe data object. Dataset ini tidak memiliki missing value pada setiap kolomnya.
"""

# Menampilkan statistik deskriptif dataset dengan menjalankan describe
df.describe()

"""**Insight:**

Berdasarkan data statistik deskriptif tersebut, terdapat outlier pada kolom `age` = 0.08 dan `bmi` = 95.69.
"""

# Menampilkan korelasi antar fitur
# Hitung korelasi antar fitur numerik
correlation_matrix = df.corr(numeric_only=True)

# Plot heatmap korelasi
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap="YlGnBu", fmt=".2f", linewidths=0.5)
plt.title("Matriks Korelasi antar Fitur Numerik", fontsize=16)
plt.tight_layout()
plt.show()

"""**Insight:**

Berdasarkan heatmap korelasi fitur numerik terhadap target `diabetes`, dapat diamati bahwa fitur `blood_glucose_level` dan `HbA1c_level` memiliki korelasi tertinggi yaitu 0.42 dan 0.40. Selain itu, beberapa fitur lain seperti `age`, `bmi`, `hypertension`, dan `heart_disease` punya kontribusi yang lebih kecil, tapi tetap informatif.
"""

# prompt: buat distribusi kelas targetnya

# Menampilkan distribusi kelas target
plt.figure(figsize=(6, 4))
sns.countplot(x='diabetes', data=df, palette='viridis')
plt.title('Distribusi Kelas Target (Diabetes)', fontsize=16)
plt.xlabel('Diabetes')
plt.ylabel('Jumlah')
plt.xticks([0, 1], ['Tidak Diabetes', 'Diabetes'])
plt.show()

# Menghitung persentase distribusi kelas
class_distribution = df['diabetes'].value_counts(normalize=True) * 100
print("\nPersentase Distribusi Kelas Target:")
class_distribution

# Menampilkan histogram untuk semua kolom numerik
# Pilih hanya kolom numerik
numeric_columns = df.select_dtypes(include=['int64', 'float64'])

# Plot histogram untuk semua kolom numerik
numeric_columns.hist(bins=30, figsize=(14, 10), color='skyblue', edgecolor='black')
plt.suptitle("Histogram untuk Semua Kolom Numerik", fontsize=16)
plt.tight_layout()
plt.show()

"""**Insight:**

* `age`: Distribusi cukup merata dengan puncak di sekitar usia 70-80 tahun. Terdapat outlier ekstrem dengan usia di bawah 1 tahun.
* `hypertension` dan `heart_disease`: Datanya tidak seimbang dengan mayoritas 0 (tidak memiliki riwayat).
* `bmi`: Distribusi positively skewed (condong ke kanan), dengan satu puncak tajam.
* `HbA1c_level`: Distribusi cenderung normal dengan puncak di sekitar 6.0–6.5.
* `blood_glucose_level`: Distribusi tidak normal, dengan lonjakan pada kisaran 140–160.
* `diabetes`: Sangat imbalanced, kelas 0 (non-diabetes) jauh lebih banyak dari kelas 1 (diabetes).


"""

# Visualisasi untuk kolom 'gender'
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='gender', palette='viridis')
plt.title('Distribusi Gender', fontsize=14)
plt.xlabel('Gender', fontsize=12)
plt.ylabel('Jumlah', fontsize=12)
plt.show()

# Visualisasi untuk kolom 'smoking_history'
plt.figure(figsize=(6, 4))
sns.countplot(data=df, x='smoking_history', palette='viridis')
plt.title('Distribusi Riwayat Merokok', fontsize=14)
plt.xlabel('Riwayat Merokok', fontsize=12)
plt.ylabel('Jumlah', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""**Insight:**

Berdasarkan visualisasi tersebut, jumlah female lebih banyak dibanding male pada dataset ini. Selain itu, pada distribusi riwayat merokok yaitu No Info dan never memiliki jumlah tertinggi.
"""

# Visualisasi Perbandingan BMI antara Penderita dan Non-Penderita Diabetes
sns.boxplot(x='diabetes', y='bmi', data=df, palette='pastel')
plt.title('Perbandingan BMI antara Penderita dan Non-Penderita Diabetes')
plt.xlabel('Diabetes')
plt.ylabel('BMI')
plt.show()

"""**Insight:**

Berdasarkan visualisasi boxplot tersebut, BMI cenderung lebih tinggi pada individu dengan diabetes yang didukung dengan pengetahuan medis bahwa obesitas adalah faktor risiko kuat untuk diabetes tipe 2.

### **Data Cleaning**
"""

# Mengecek missing value dataset menggunakan isnull().sum()
df.isnull().sum()

"""**Insight:**

Tidak terdapat missing value pada setiap kolomnya.
"""

# Mengecek duplikasi dataset menggunakan duplicated().sum()
print('Jumlah data duplikat:', df.duplicated().sum())

# Menghapus data duplikat menggunakan drop_duplicates().
df.drop_duplicates(inplace=True)

print('Jumlah data duplikat setelah dihapus:', df.duplicated().sum())

"""**Insight:**

Terdapat duplikasi data sebanyak 3854.
"""

# Menampilkan jumlah baris dan kolom setelah menghapus data duplikat
print(f"Jumlah baris: {df.shape[0]}")
print(f"Jumlah kolom: {df.shape[1]}")

"""**Insight:**

Setelah menghapus data duplikat, jumlah baris pada dataset ini menjadi 96146.
"""

# Menampilkan jumlah penderita dan non-penderita diabetes
diabetic_count = df[df['diabetes'] == 1].shape[0]
non_diabetic_count = df[df['diabetes'] == 0].shape[0]

print(f"Jumlah penderita diabetes: {diabetic_count}")
print(f"Jumlah non-penderita diabetes: {non_diabetic_count}")

"""**Insight:**

Jumlah penderita diabetes setelah dihapus data duplikat menjadi 8482 dan non-penderita diabetes menjadi 87664.
"""

# Mengecek data anomali
# Usia terlalu kecil (misalnya < 1 tahun)
anomali_usia = df[df['age'] < 1]
print(f"Jumlah data dengan usia < 1 tahun: {len(anomali_usia)}")

# BMI yang tidak realistis (misalnya < 10 atau > 60)
anomali_bmi = df[(df['bmi'] < 10) | (df['bmi'] > 60)]
print(f"Jumlah data dengan BMI tidak wajar: {len(anomali_bmi)}")

# HbA1c level yang sangat ekstrem (misalnya < 3 atau > 15)
anomali_hba1c = df[(df['HbA1c_level'] < 3) | (df['HbA1c_level'] > 15)]
print(f"Jumlah data dengan HbA1c_level tidak wajar: {len(anomali_hba1c)}")

# Blood glucose level sangat rendah atau tinggi (misalnya < 50 atau > 300)
anomali_glukosa = df[(df['blood_glucose_level'] < 50) | (df['blood_glucose_level'] > 300)]
print(f"Jumlah data dengan blood_glucose_level tidak wajar: {len(anomali_glukosa)}")

"""**Insight:**

Berdasarkan informasi tersebut, jumlah data dengan usia di bawah 1 tahun sebanyak 910 baris dan jumlah data dengan BMI tidak wajar sebanyak 115 baris.
"""

# Menampilkan data usia di bawah 1 tahun
print("Data dengan usia di bawah 1 tahun:")
anomali_usia

# Mengganti usia kurang dari 1 tahun dengan rata-rata usia
rata_rata_usia = df['age'].mean()
df.loc[df['age'] < 1, 'age'] = rata_rata_usia

# Menampilkan jumlah data dengan usia < 1 tahun setelah perubahan
anomali_usia_baru = df[df['age'] < 1]
print(f"Jumlah data dengan usia < 1 tahun setelah diganti dengan rata-rata: {len(anomali_usia_baru)}")

print("\nDataframe setelah penggantian usia:")
df.describe()

# Buat salinan DataFrame untuk perbandingan
df_before = df.copy()

# Hitung rata-rata BMI
rata_rata_bmi = df['bmi'].mean()

# Ganti nilai BMI anomali dengan rata-rata
df.loc[(df['bmi'] < 10) | (df['bmi'] > 60), 'bmi'] = rata_rata_bmi

# Visualisasi Boxplot BMI Sebelum dan Setelah Perbaikan
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
sns.boxplot(x='diabetes', y='bmi', data=df_before, palette='pastel')
plt.title('BMI Sebelum Diganti dengan Rata-rata')
plt.xlabel('Diabetes')
plt.ylabel('BMI')

plt.subplot(1, 2, 2)
sns.boxplot(x='diabetes', y='bmi', data=df, palette='pastel')
plt.title('BMI Setelah Diganti dengan Rata-rata')
plt.xlabel('Diabetes')
plt.ylabel('BMI')

plt.tight_layout()
plt.show()

# Menampilkan jumlah data dengan BMI anomali setelah perubahan
anomali_bmi_baru = df[(df['bmi'] < 10) | (df['bmi'] > 60)]
print(f"Jumlah data dengan BMI tidak wajar setelah diganti dengan rata-rata: {len(anomali_bmi_baru)}")

# Menghapus 'other' pada kolom gender
df = df[df['gender'] != 'Other']
print(df['gender'].value_counts())

"""**Insight:**

Berdasarkan informasi di atas, other pada kolom gender dihapus karena jumlahnya sangat kecil, hanya sebanyak 18 baris.

### **Encoding**
"""

categorical_cols = ['gender', 'smoking_history']
le = LabelEncoder()
df_encoded = df.copy()
label_encoders = {}

for col in categorical_cols:
    le = LabelEncoder()
    df_encoded[col] = le.fit_transform(df_encoded[col])
    label_encoders[col] = le

"""**Insight:**

Dilakukan encoding untuk kolom kategorikal `gender` dan `smoking_history` menggunakan LabelEncoder dari scikit-learn. Hasilnya disimpan dalam `df_encoded`.
"""

for col in ['gender', 'smoking_history']:
    print(f"\nMapping untuk kolom '{col}':")
    # Menggunakan label_encoders yang sudah dibuat sebelumnya
    le = label_encoders[col]
    # Mendapatkan mapping dari encoder
    mapping = dict(zip(le.classes_, le.transform(le.classes_)))
    for original_value, encoded_value in mapping.items():
        print(f"'{original_value}' -> {encoded_value}")

"""**Insight:**

* Pada kolom `gender`, terdapat dua label kategori, yaitu 0 (female) dan 1 (male).
* Pada kolom `smoking_history`, terdapat enam label kategori, yaitu 0 (No Info), 1 (current), 2 (ever), 3 (former), 4 (never), dan 5 (not current).

## **Normalisasi**
"""

# Initialize MinMaxScaler
scaler = MinMaxScaler()

# Select the columns to normalize (assuming all numerical columns except 'diabetes')
numerical_cols = df_encoded.select_dtypes(include=np.number).columns.tolist()
numerical_cols.remove('diabetes') # Exclude the target variable

# Apply Min-Max scaling to the selected columns
df_scaled = df_encoded.copy()
df_scaled[numerical_cols] = scaler.fit_transform(df_scaled[numerical_cols])

"""**Insight:**

Dilakukan normalisasi Min-Max scaling untuk mengubah setiap nilai fitur numerik ke dalam skala 0 sampai 1.
"""

print("Data setelah normalisasi Min-Max:")
df_scaled.head()

"""**Insight:**

Semua nilai fitur (kecuali `diabetes`) sekarang berada di rentang [0, 1] yang menunjukkan bahwa normalisasi Min-Max berhasil diterapkan. Normalisasi ini memastikan bahwa tidak ada satu pun fitur numerik yang mendominasi dalam proses pembelajaran model.

### **Membangun Model**
"""

# Pisahkan fitur (X) dan target (y)
X = df_scaled.drop('diabetes', axis=1)
y = df_scaled['diabetes']

# Terapkan SMOTE untuk menyeimbangkan data sebelum split
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y) # Apply SMOTE to the entire dataset

print(f"Jumlah penderita diabetes setelah SMOTE: {sum(y_resampled)}") # Menampilkan jumlah penderita diabetes setelah SMOTE
print(f"Jumlah non-penderita diabetes setelah SMOTE: {len(y_resampled) - sum(y_resampled)}") # Menampilkan jumlah non-penderita diabetes setelah SMOTE

# Bagi data menjadi data latih dan data uji
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

print(f"Jumlah data training: {X_train.shape[0]}")
print(f"Jumlah data test: {X_test.shape[0]}")
print(f"Jumlah seluruh data setelah SMOTE: {X_resampled.shape[0]}")

# Buat dan latih model Random Forest
model_rf = RandomForestClassifier(random_state=42)
model_rf.fit(X_train, y_train)  # Menggunakan data latih setelah SMOTE

# Lakukan prediksi pada data uji
y_pred = model_rf.predict(X_test)

# Evaluasi model
print(classification_report(y_test, y_pred))
print("Akurasi:", accuracy_score(y_test, y_pred))

# Buat confusion matrix
cm = confusion_matrix(y_test, y_pred)

# Visualisasikan dengan heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Diabetes', 'Diabetes'], yticklabels=['Non-Diabetes', 'Diabetes'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix - Random Forest')
plt.show()

!pip install xgboost
from xgboost import XGBClassifier

# Buat dan latih model XGBoost
model_xgb = XGBClassifier(random_state=42)
model_xgb.fit(X_train, y_train)

# Lakukan prediksi pada data uji
y_pred_xgb = model_xgb.predict(X_test)

# Evaluasi model XGBoost
print("Evaluasi Model XGBoost:")
print(classification_report(y_test, y_pred_xgb))
print("Akurasi XGBoost:", accuracy_score(y_test, y_pred_xgb))

# Buat confusion matrix untuk XGBoost
cm_xgb = confusion_matrix(y_test, y_pred_xgb)

# Visualisasikan confusion matrix XGBoost dengan heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(cm_xgb, annot=True, fmt='d', cmap='Blues', xticklabels=['Non-Diabetes', 'Diabetes'], yticklabels=['Non-Diabetes', 'Diabetes'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix - XGBoost')
plt.show()

import numpy as np
from sklearn.model_selection import cross_val_score

# Perform 5-fold cross-validation
cv_scores = cross_val_score(model_rf, X_resampled, y_resampled, cv=5, scoring='accuracy')

# Print the cross-validation scores
print("Cross-validation scores:", cv_scores)

# Print the average cross-validation score
print("Average cross-validation accuracy:", np.mean(cv_scores))

"""**Insight:**

Hasil cross-validation Random Forest menunjukkan akurasi tinggi dan konsisten dengan rata-rata sekitar 97.65%. Skor di tiap fold cukup stabil, menandakan model tahan terhadap variasi data dan tidak mudah overfitting. Ini mengindikasikan Random Forest mampu memberikan prediksi yang andal dan generalisasi baik untuk risiko diabetes.

"""

# Perform 5-fold cross-validation for XGBoost
cv_scores_xgb = cross_val_score(model_xgb, X_resampled, y_resampled, cv=5, scoring='accuracy')

# Print the cross-validation scores for XGBoost
print("\nCross-validation scores (XGBoost):", cv_scores_xgb)

# Print the average cross-validation score for XGBoost
print("Average cross-validation accuracy (XGBoost):", np.mean(cv_scores_xgb))

"""**Insight:**

Hasil cross-validation XGBoost menunjukkan akurasi tinggi dan konsisten dengan rata-rata 97,65%. Variasi skor yang kecil menandakan model stabil dan tidak overfitting, sehingga mampu melakukan generalisasi dengan baik.

### **Inference**
"""

# Input data for inference
input_data = {
    'gender': 'Female',
    'age': 44,
    'hypertension': 0,
    'heart_disease': 0,
    'smoking_history': 'never',
    'bmi': 19.31,
    'HbA1c_level': 6.5,
    'blood_glucose_level': 200
}

input_df = pd.DataFrame([input_data])
input_df = input_df[X.columns]
le_gender = LabelEncoder()
le_gender.fit(df['gender'].unique()) # Fit on original unique values
input_df['gender'] = le_gender.transform(input_df['gender'])

le_smoking = LabelEncoder()
le_smoking.fit(df['smoking_history'].unique()) # Fit on original unique values
input_df['smoking_history'] = le_smoking.transform(input_df['smoking_history'])
input_df[numerical_cols] = scaler.transform(input_df[numerical_cols])

# Make predictions
prediction = model_rf.predict(input_df)

# Print the prediction (0 for non-diabetic, 1 for diabetic)
print("Prediction:", prediction)

if prediction[0] == 1:
    print("Diprediksi Diabetes")
else:
    print("Diprediksi Non-Diabetes")

# Menyimpan model menggunakan joblib
joblib.dump(le_gender, 'le_gender.joblib')
joblib.dump(le_smoking, 'le_smoking.joblib')
joblib.dump(scaler, 'scaler.joblib')
joblib.dump(model_rf, "model_diabetes.joblib")